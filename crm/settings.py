"""
Django settings for crm project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ej=s3v#7gjmn*elic2@c0i63%(q5jxd-1v=n=^2%_ymil%vtdi'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
	'django_celery_beat',
	'django_celery_results',
    'crmapp',
    'ocrapp',
	'email_sender',
    'schedule_meetings',
    'generate_invoice',
	'chat_app',
    'dashboard',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'crm.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'crm.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'crmdb',
        'HOST' : 'localhost',
        'USER' : 'root',
        'PASSWORD' : '',
        'PORT' : 3306,
    }
}
#the email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True 
DEFAULT_FROM_EMAIL = "MY APP"
EMAIL_HOST_USER = "connectteim@gmail.com"
EMAIL_HOST_PASSWORD = "rmmx ylvp kihj goxo"

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'
USE_TZ = True
TIME_ZONE = 'Asia/Kolkata'
USE_I18N = True



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = ' static/'
STATICFILES_DIRS=[
    os.path.join(BASE_DIR, 'static')
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# settings.py
SECURITY_KEY = 'Seva@Facility@0000'



AUTHENTICATION_BACKENDS = [
    'crmapp.backends.ContactNumberBackend', 
    'django.contrib.auth.backends.ModelBackend',
]











#        celery practice
# settings.py

# Celery configuration
CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'django-db'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_CACHE_BACKEND = 'django-cache'



# crm/settings.py

# from celery.schedules import crontab

# Existing Celery configuration...

# CELERY_BEAT_SCHEDULE = {
#     'send-warm-lead-follow-up': {
#         'task': 'lead_automation.tasks.send_regular_follow_up_task',
#         'schedule': crontab(minute=0, hour=2, day_of_week='wednesday'),  # Example: 1:19 AM every Wednesday
#     },
#     'send-cold-lead-follow-up': {
#         'task': 'lead_automation.tasks.send_occasional_follow_up_task',
#         'schedule': crontab(minute=1, hour=2, day_of_week='wednesday'),  # Example: 1:22 AM every Wednesday
#     },
#     'send-immediate-follow-up': {
#         'task': 'lead_automation.tasks.send_immediate_follow_up_task',
#         'schedule': crontab(minute=2, hour=2, day_of_week='wednesday'),  # Immediate follow-up
#     },
#     'send-feedback-request': {
#         'task': 'lead_automation.tasks.send_feedback_request_task',
#         'schedule': crontab(minute=2, hour=2),  # Example: 1:00 AM every day for feedback requests
#     },
#     'send-thank-you-email': {
#         'task': 'lead_automation.tasks.send_thank_you_task',
#         'schedule': crontab(minute=3, hour=2),  # Example: 1:00 AM every day for thank you emails
#     },
# }


# from datetime import timedelta

# CELERY_BEAT_SCHEDULE = {
#     'send-warm-lead-follow-up': {
#         'task': 'lead_automation.tasks.send_regular_follow_up_task',
#         'schedule': timedelta(minutes=1),  # Run every minute
#     },
#     'send-cold-lead-follow-up': {
#         'task': 'lead_automation.tasks.send_occasional_follow_up_task',
#         'schedule': timedelta(minutes=2),  # Run every 2 minutes
#     },
#     'send-immediate-follow-up': {
#         'task': 'lead_automation.tasks.send_immediate_follow_up_task',
#         'schedule': timedelta(minutes=3),  # Run every 3 minutes
#     },
#     'send-feedback-request': {
#         'task': 'lead_automation.tasks.send_feedback_request_task',
#         'schedule': timedelta(minutes=4),  # Run every 4 minutes
#     },
#     'send-thank-you-email': {
#         'task': 'lead_automation.tasks.send_thank_you_task',
#         'schedule': timedelta(minutes=5),  # Run every 5 minutes
#     },
# }


# settings.py
# from celery.schedules import crontab


# CELERY_BEAT_SCHEDULE = {
#     'send-immediate-follow-ups': {
#         'task': 'lead_automation.tasks.send_immediate_follow_up_task',
#         'schedule': crontab(minute='*'),  # Adjust the schedule
#     },
#     'send-regular-follow-ups': {
#         'task': 'lead_automation.tasks.send_regular_follow_up_task',
#         'schedule': crontab(minute='*'),  # Adjust the schedule
#     },
#     'send-occasional-follow-ups': {
#         'task': 'lead_automation.tasks.send_occasional_follow_up_task',
#         'schedule': crontab(minute='*'),  # Adjust the schedule
#     },
#     'send-feedback-requests': {
#         'task': 'lead_automation.tasks.send_feedback_request_task',
#         'schedule': crontab(minute='*'),  # Adjust the schedule
#     },
#     'send-thank-you-emails': {
#         'task': 'lead_automation.tasks.send_thank_you_task',
#         'schedule': crontab(minute='*'),  # Adjust the schedule
#     },
# }



CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

DATA_UPLOAD_MAX_MEMORY_SIZE = 1073741824  # 1GB
FILE_UPLOAD_MAX_MEMORY_SIZE = 1073741824  # 1GB
